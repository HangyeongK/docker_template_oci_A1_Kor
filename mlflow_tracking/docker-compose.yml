version: "3"
services:
  mlflow:
    image: mlflow
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${TRACKING_PORT}:${TRACKING_PORT}
    restart: always
    depends_on:
      - mlflowsql
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio-access-key
      AWS_SECRET_ACCESS_KEY: minio-secret-key
      NETWORK_ACCESS: internal
    command: >
      mlflow server
      --backend-store-uri 'mysql://mlflowuser:mlflowpassword@mlflowsql:3306/mlflowdb'
      --artifacts-destination 's3://default/artifacts'
      --serve-artifacts
      --host 0.0.0.0
      --port ${TRACKING_PORT}
    volumes:
      - ./mlflow:/var/mlflow
    networks:
      - mlflow-network
  mlflowsql:
    image: mysql:oracle
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root-password
      MYSQL_DATABASE: mlflowdb
      MYSQL_USER: mlflowuser
      MYSQL_PASSWORD: mlflowpassword
    volumes:
      - ./mysql:/var/lib/mysql
      - ./timeout.cnf:/etc/mysql/conf.d/timeout.cnf
    networks:
      - mlflow-network
  minio:
    image: minio/minio
    restart: always
    volumes:
     - ./minio1:/export
    environment:
      MINIO_ACCESS_KEY: minio-access-key
      MINIO_SECRET_KEY: minio-secret-key
    command: server /export
    networks:
      - mlflow-network
  defaultbucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://minio:9000 minio-access-key minio-secret-key) do echo 'try to create buckets...' && sleep 1; done;
      /usr/bin/mc mb myminio/default;
      /usr/bin/mc policy download myminio/default;
      exit 0;
      "
    networks:
      - mlflow-network

networks:
  mlflow-network:
    name: mlflow-network